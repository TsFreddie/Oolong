<#@ template language="C#" #>
<#@ output extension=".cs" encoding="UTF-8" #>
<#@ import namespace="System.Linq" #>
<#
    var handlers = new (string, string)[]
    {
        ("PointerEnter", "PointerEventData"),
        ("PointerExit", "PointerEventData"),
        ("PointerDown", "PointerEventData"),
        ("PointerUp", "PointerEventData"),
        ("PointerMove", "PointerEventData"),
        ("PointerClick", "PointerEventData"),
        ("InitializePotentialDrag", "PointerEventData"),
        ("BeginDrag", "PointerEventData"),
        ("Drag", "PointerEventData"),
        ("EndDrag", "PointerEventData"),
        ("Drop", "PointerEventData"),
        ("Scroll", "PointerEventData"),
        ("UpdateSelected", "BaseEventData"),
        ("Select", "BaseEventData"),
        ("Deselect", "BaseEventData"),
        ("Move", "AxisEventData"),
        ("Submit", "BaseEventData"),
        ("Cancel", "BaseEventData"),
    };
#>
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

namespace TSF.Oolong.UGUI
{
    public interface IUIEventHandler
    {
        void AddListener(IOolongLoader.JsCallback callback);
        void RemoveListener();
    }

    public static class UIEventHandler
    {
        private static readonly List<IUIEventHandler> s_handlerCache = new List<IUIEventHandler>();

        public static Type GetHandlerType(string key)
        {
            switch (key)
            {
<#
    foreach (var handler in handlers)
    {
        var name = handler.Item1;
#>
                case "<#= name.ToLowerInvariant() #>": return typeof(On<#= name #>Handler);
<#
    }
#>
            }
            return null;
        }

        public static bool AddListenerToGameObject(GameObject gameObject, string key, IOolongLoader.JsCallback callback)
        {
            var type = GetHandlerType(key);
            if (type == null) return false;

            var handler = gameObject.GetComponent(type) as IUIEventHandler;
            if (handler == null) handler = gameObject.AddComponent(type) as IUIEventHandler;
            if (handler == null) return false;
            handler.AddListener(callback);
            return true;
        }

        public static bool RemoveListenerFromGameObject(GameObject gameObject, string key)
        {
            var type = GetHandlerType(key);
            if (type == null) return false;

            var handler = gameObject.GetComponent(type) as IUIEventHandler;
            if (handler == null) return false;
            handler.RemoveListener();
            return true;
        }

        public static void ResetListeners(GameObject gameObject)
        {
            gameObject.GetComponents(s_handlerCache);
            foreach (var handler in s_handlerCache)
            {
                handler.RemoveListener();
            }
            s_handlerCache.Clear();
        }
    }

<#
    foreach (var handler in handlers)
    {
        var name = handler.Item1;
        var dataType = handler.Item2;
#>
    public class On<#= name #>Handler : MonoBehaviour, I<#= name #>Handler, IUIEventHandler
    {
        private IOolongLoader.JsCallback _callback;

#if UNITY_EDITOR
        private void OnEnable() {}
#endif

        public void AddListener(IOolongLoader.JsCallback callback)
        {
            _callback = callback;
            enabled = true;
        }

        public void RemoveListener()
        {
            _callback = null;
            enabled = false;
        }

        public void On<#= name #>(<#= dataType #> eventData)
        {
            _callback?.Invoke(eventData);
        }
    }
<#
    }
#>
}
