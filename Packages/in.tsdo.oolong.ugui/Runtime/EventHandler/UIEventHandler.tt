<#@ template language="C#" #>
<#@ output extension=".cs" encoding="UTF-8" #>
<#@ import namespace="System.Linq" #>
<#
    var handlers = new (string, string)[]
    {
        ("PointerEnter", "PointerEventData"),
        ("PointerExit", "PointerEventData"),
        ("PointerDown", "PointerEventData"),
        ("PointerUp", "PointerEventData"),
        ("PointerMove", "PointerEventData"),
        ("PointerClick", "PointerEventData"),
        ("InitializePotentialDrag", "PointerEventData"),
        ("BeginDrag", "PointerEventData"),
        ("Drag", "PointerEventData"),
        ("EndDrag", "PointerEventData"),
        ("Drop", "PointerEventData"),
        ("Scroll", "PointerEventData"),
        ("UpdateSelected", "BaseEventData"),
        ("Select", "BaseEventData"),
        ("Deselect", "BaseEventData"),
        ("Move", "AxisEventData"),
        ("Submit", "BaseEventData"),
        ("Cancel", "BaseEventData"),
    };
#>
using UnityEngine;
using UnityEngine.EventSystems;

namespace TSF.Oolong.UGUI
{
    public class UIEventHandler : MonoBehaviour,
        <#= string.Join(", \n        ", handlers.Select(h => $"I{h.Item1}Handler").ToArray()) #>
    {
        private int _eventCount;
        private int EventCount
        {
            get => _eventCount;
            set
            {
                _eventCount = value;
                enabled = _eventCount > 0;
            }
        }
<#
    foreach (var handler in handlers)
    {
#>
        private IOolongLoader.JsCallback _on<#= handler.Item1 #>;
<#
    }
#>

        public bool AddListener(string key, IOolongLoader.JsCallback callback)
        {
            switch (key)
            {
<#
    foreach (var handler in handlers)
    {
#>
                case "<#= handler.Item1.ToLower() #>":
                    if (_on<#= handler.Item1 #> == null) EventCount++;
                    _on<#= handler.Item1 #> = callback;
                    return true;
<#
    }
#>
            }
            return false;
        }

        public bool RemoveListener(string key)
        {
            switch (key)
            {
<#
    foreach (var handler in handlers)
    {
#>
                case "<#= handler.Item1.ToLower() #>":
                    if (_on<#= handler.Item1 #> != null) EventCount--;
                    _on<#= handler.Item1 #> = null;
                    return true;
<#
    }
#>
            }
            return false;
        }
<#
    foreach (var handler in handlers)
    {
#>
        public void On<#= handler.Item1 #>(<#= handler.Item2 #> eventData)
        {
            _on<#= handler.Item1 #>?.Invoke(eventData);
        }
<#
    }
#>

        public void Reset()
        {
            _eventCount = 0;
            enabled = false;
<#
    foreach (var handler in handlers)
    {
#>
            _on<#= handler.Item1 #> = null;
<#
    }
#>
        }

#if UNITY_EDITOR
        private void OnEnable() { }
#endif
    }
}
